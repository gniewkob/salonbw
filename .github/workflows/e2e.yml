name: E2E

on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  PNPM_VERSION: 10.14.0
  NODE_VERSION: '22'
  DB_LOCAL_PORT: 8543
  CI: true

jobs:
  cypress:
    name: Cypress E2E
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify required secrets
        id: secrets
        run: |
          missing=()
          for var in MYDEVIL_SSH_HOST MYDEVIL_SSH_USER MYDEVIL_SSH_KEY MYDEVIL_PG_HOST MYDEVIL_PG_PORT MYDEVIL_DB_USER MYDEVIL_DB_PASSWORD MYDEVIL_DB_NAME JWT_SECRET JWT_REFRESH_SECRET; do
            if [ -z "${!var}" ]; then
              missing+=("$var")
            fi
          done
          if [ "${#missing[@]}" -gt 0 ]; then
            printf 'Missing secrets: %s\n' "${missing[@]}"
            echo "available=false" >> "$GITHUB_OUTPUT"
            echo "Required secrets missing â€“ skipping E2E run." >> "$GITHUB_STEP_SUMMARY"
          else
            echo "available=true" >> "$GITHUB_OUTPUT"
          fi
        env:
          MYDEVIL_SSH_HOST: ${{ secrets.MYDEVIL_SSH_HOST }}
          MYDEVIL_SSH_USER: ${{ secrets.MYDEVIL_SSH_USER }}
          MYDEVIL_SSH_KEY: ${{ secrets.MYDEVIL_SSH_KEY }}
          MYDEVIL_PG_HOST: ${{ secrets.MYDEVIL_PG_HOST }}
          MYDEVIL_PG_PORT: ${{ secrets.MYDEVIL_PG_PORT }}
          MYDEVIL_DB_USER: ${{ secrets.MYDEVIL_DB_USER }}
          MYDEVIL_DB_PASSWORD: ${{ secrets.MYDEVIL_DB_PASSWORD }}
          MYDEVIL_DB_NAME: ${{ secrets.MYDEVIL_DB_NAME }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}

      - name: Setup Node
        if: steps.secrets.outputs.available == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Setup pnpm
        if: steps.secrets.outputs.available == 'true'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Configure npm registry
        if: steps.secrets.outputs.available == 'true' && secrets.NPM_TOKEN != ''
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install dependencies
        if: steps.secrets.outputs.available == 'true'
        run: pnpm install --frozen-lockfile

      - name: Configure SSH
        if: steps.secrets.outputs.available == 'true'
        run: |
          mkdir -p ~/.ssh
          echo "$MYDEVIL_SSH_KEY" > ~/.ssh/mydevil
          chmod 600 ~/.ssh/mydevil
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/mydevil
          if [ -n "$MYDEVIL_KNOWN_HOSTS" ]; then
            echo "$MYDEVIL_KNOWN_HOSTS" > ~/.ssh/known_hosts
          else
            ssh-keyscan -H "$MYDEVIL_SSH_HOST" >> ~/.ssh/known_hosts
          fi
        env:
          MYDEVIL_SSH_KEY: ${{ secrets.MYDEVIL_SSH_KEY }}
          MYDEVIL_SSH_HOST: ${{ secrets.MYDEVIL_SSH_HOST }}
          MYDEVIL_KNOWN_HOSTS: ${{ secrets.MYDEVIL_KNOWN_HOSTS }}

      - name: Start database tunnel
        id: tunnel
        if: steps.secrets.outputs.available == 'true'
        run: pnpm tunnel:start
        env:
          MYDEVIL_SSH_HOST: ${{ secrets.MYDEVIL_SSH_HOST }}
          MYDEVIL_SSH_USER: ${{ secrets.MYDEVIL_SSH_USER }}
          MYDEVIL_PG_HOST: ${{ secrets.MYDEVIL_PG_HOST }}
          MYDEVIL_PG_PORT: ${{ secrets.MYDEVIL_PG_PORT }}
          DB_LOCAL_PORT: ${{ env.DB_LOCAL_PORT }}

      - name: Export backend environment
        if: steps.secrets.outputs.available == 'true'
        run: |
          echo "DATABASE_URL=postgresql://${MYDEVIL_DB_USER}:${MYDEVIL_DB_PASSWORD}@localhost:${DB_LOCAL_PORT}/${MYDEVIL_DB_NAME}" >> "$GITHUB_ENV"
          echo "PORT=3001" >> "$GITHUB_ENV"
          echo "FRONTEND_URL=http://localhost:3000" >> "$GITHUB_ENV"
        env:
          MYDEVIL_DB_USER: ${{ secrets.MYDEVIL_DB_USER }}
          MYDEVIL_DB_PASSWORD: ${{ secrets.MYDEVIL_DB_PASSWORD }}
          MYDEVIL_DB_NAME: ${{ secrets.MYDEVIL_DB_NAME }}
          DB_LOCAL_PORT: ${{ env.DB_LOCAL_PORT }}

      - name: Start backend
        if: steps.secrets.outputs.available == 'true'
        run: |
          pnpm --filter salonbw-backend build
          pnpm --filter salonbw-backend start:prod > backend.log 2>&1 &
          echo $! > backend.pid
          for attempt in {1..30}; do
            if curl -sSf http://localhost:3001/healthz >/dev/null; then
              exit 0
            fi
            sleep 5
          done
          echo "Backend failed to become healthy" >&2
          cat backend.log || true
          exit 1
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          PORT: 3001
          FRONTEND_URL: ${{ env.FRONTEND_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          WHATSAPP_TOKEN: ${{ secrets.WHATSAPP_TOKEN }}
          WHATSAPP_PHONE_ID: ${{ secrets.WHATSAPP_PHONE_ID }}
          REMINDER_HOURS_BEFORE: ${{ secrets.REMINDER_HOURS_BEFORE }}

      - name: Run Cypress suite
        if: steps.secrets.outputs.available == 'true'
        run: pnpm --filter frontend e2e:ci
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001

      - name: Upload Cypress videos
        if: steps.secrets.outputs.available == 'true' && always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: frontend/cypress/videos
          if-no-files-found: ignore

      - name: Upload Cypress screenshots
        if: steps.secrets.outputs.available == 'true' && failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots
          if-no-files-found: ignore

      - name: Stop backend
        if: steps.secrets.outputs.available == 'true' && always()
        run: |
          if [ -f backend.pid ]; then
            kill "$(cat backend.pid)" || true
            rm backend.pid
          fi

      - name: Stop tunnel
        if: steps.secrets.outputs.available == 'true' && always()
        run: pnpm tunnel:stop
