name: Deploy API

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: Commit to deploy
        required: true
      environment:
        description: Target environment (production or staging)
        required: true
        default: staging
      remote_path:
        description: Remote path (e.g., /home/<user>/apps/nodejs/api_salonbw). If empty, repo variables are used.
        required: false
        default: ''
      app_name:
        description: MyDevil app/domain name to restart (e.g., api.salon-bw.pl). If empty, repo variables are used.
        required: false
        default: ''

permissions:
  contents: read

jobs:
  deploy:
    name: Upload Backend API
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.commit_sha }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION || '22' }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ vars.PNPM_VERSION || '10.14.0' }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Resolve deploy destination
        id: dest
        shell: bash
        run: |
          ENV="${{ github.event.inputs.environment }}"
          INPUT_PATH="${{ github.event.inputs.remote_path }}"
          INPUT_APP="${{ github.event.inputs.app_name }}"
          REMOTE_PATH="$INPUT_PATH"
          APP_NAME="$INPUT_APP"

          if [ -z "$REMOTE_PATH" ]; then
            if [ "$ENV" = "production" ] && [ -n "${{ vars.MYDEVIL_API_REMOTE_PATH_PRODUCTION }}" ]; then
              REMOTE_PATH="${{ vars.MYDEVIL_API_REMOTE_PATH_PRODUCTION }}"
            elif [ "$ENV" = "staging" ] && [ -n "${{ vars.MYDEVIL_API_REMOTE_PATH_STAGING }}" ]; then
              REMOTE_PATH="${{ vars.MYDEVIL_API_REMOTE_PATH_STAGING }}"
            fi
          fi

          if [ -z "$APP_NAME" ]; then
            if [ "$ENV" = "production" ] && [ -n "${{ vars.MYDEVIL_API_APP_NAME_PRODUCTION }}" ]; then
              APP_NAME="${{ vars.MYDEVIL_API_APP_NAME_PRODUCTION }}"
            elif [ "$ENV" = "staging" ] && [ -n "${{ vars.MYDEVIL_API_APP_NAME_STAGING }}" ]; then
              APP_NAME="${{ vars.MYDEVIL_API_APP_NAME_STAGING }}"
            fi
          fi

          if [ -z "$REMOTE_PATH" ] || [ -z "$APP_NAME" ]; then
            echo "::error::remote_path/app_name not provided and no repository variable fallback found" >&2
            exit 1
          fi
          echo "remote_path=$REMOTE_PATH" >> "$GITHUB_OUTPUT"
          echo "app_name=$APP_NAME" >> "$GITHUB_OUTPUT"

      - name: Build backend
        run: pnpm --filter salonbw-backend build

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          KEY_CONTENT="${MYDEVIL_SSH_KEY:-$SSH_PRIVATE_KEY}"
          if printf "%s" "$KEY_CONTENT" | grep -q -- "-----BEGIN "; then
            printf "%s" "$KEY_CONTENT" | tr -d '\r' > ~/.ssh/mydevil
          else
            printf "%s" "$KEY_CONTENT" | tr -d '\r' | base64 -d > ~/.ssh/mydevil || printf "%s" "$KEY_CONTENT" | tr -d '\r' > ~/.ssh/mydevil
          fi
          chmod 600 ~/.ssh/mydevil
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/mydevil
          if [ -n "$MYDEVIL_KNOWN_HOSTS" ]; then
            printf "%s\n" "$MYDEVIL_KNOWN_HOSTS" > ~/.ssh/known_hosts
          else
            ssh-keyscan -H "$MYDEVIL_SSH_HOST" >> ~/.ssh/known_hosts
          fi
        env:
          MYDEVIL_SSH_HOST: ${{ secrets.MYDEVIL_SSH_HOST }}
          MYDEVIL_SSH_KEY: ${{ secrets.MYDEVIL_SSH_KEY }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          MYDEVIL_KNOWN_HOSTS: ${{ secrets.MYDEVIL_KNOWN_HOSTS }}

      - name: Upload backend bundle
        run: |
          set -euo pipefail
          ARCHIVE="$(mktemp).tar.gz"
          tar -czf "$ARCHIVE" -C backend/salonbw-backend dist package.json app.js
          REMOTE_ARCHIVE="/tmp/salonbw-backend-${{ github.run_id }}-${{ github.run_attempt }}.tar.gz"
          scp -i ~/.ssh/mydevil -o IdentitiesOnly=yes "$ARCHIVE" \
            ${{ secrets.MYDEVIL_SSH_USER }}@${{ secrets.MYDEVIL_SSH_HOST }}:"$REMOTE_ARCHIVE"
          ssh -i ~/.ssh/mydevil -o IdentitiesOnly=yes ${{ secrets.MYDEVIL_SSH_USER }}@${{ secrets.MYDEVIL_SSH_HOST }} <<'DEPLOY_CMDS'
          set -euo pipefail
          REMOTE_PATH="${{ steps.dest.outputs.remote_path }}"
          REMOTE_ARCHIVE="/tmp/salonbw-backend-${{ github.run_id }}-${{ github.run_attempt }}.tar.gz"
          mkdir -p "$REMOTE_PATH"
          rm -rf "$REMOTE_PATH/dist"
          tar -xzf "$REMOTE_ARCHIVE" -C "$REMOTE_PATH"
          rm -f "$REMOTE_ARCHIVE"
          DEPLOY_CMDS
          rm -f "$ARCHIVE"

      - name: Restart API app
        run: ssh -i ~/.ssh/mydevil -o IdentitiesOnly=yes ${{ secrets.MYDEVIL_SSH_USER }}@${{ secrets.MYDEVIL_SSH_HOST }} "devil www restart '${{ steps.dest.outputs.app_name }}'"

      - name: Smoke test API
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v curl >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y curl
          fi
          for PATH in /healthz /health; do
            if curl -fsS -I "https://${{ steps.dest.outputs.app_name }}$PATH" >/dev/null 2>&1; then
              echo "OK: $PATH"; exit 0; fi
          done
          echo "API health failed" >&2
          curl -I "https://${{ steps.dest.outputs.app_name }}/healthz" || true
          exit 1
