name: Deploy (MyDevil)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: Git ref (branch, tag, or SHA)
        required: true
        default: main
      target:
        description: What to deploy (public|dashboard|api)
        required: true
        default: public
      api_url:
        description: Public API URL used at build time (leave empty to use environment defaults)
        required: false
        default: ''
      remote_path:
        description: Remote path (e.g., /home/<user>/domains/<domain>/public_nodejs). If empty, repo variables will be used.
        required: false
        default: ''
      app_name:
        description: MyDevil app name for restart. If empty, repo variables will be used.
        required: false
        default: ''
      environment:
        description: GitHub environment (staging or production)
        required: true
        default: production

env:
  PNPM_VERSION: 10.14.0
  NODE_VERSION: '22'

jobs:
  deploy:
    name: Deploy ${{ github.event.inputs.target }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    concurrency:
      group: deploy-${{ github.event.inputs.target }}-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Resolve API URL
        if: ${{ github.event.inputs.target != 'api' }}
        id: api
        shell: bash
        run: |
          INPUT_API="${{ github.event.inputs.api_url }}"
          ENV="${{ github.event.inputs.environment }}"
          if [ -n "$INPUT_API" ]; then
            API_URL="$INPUT_API"
          elif [ "$ENV" = "production" ] && [ -n "${{ secrets.MYDEVIL_API_URL_PRODUCTION }}" ]; then
            API_URL="${{ secrets.MYDEVIL_API_URL_PRODUCTION }}"
          elif [ "$ENV" = "production" ]; then
            API_URL="https://api.salon-bw.pl"
          elif [ "$ENV" = "staging" ] && [ -n "${{ secrets.MYDEVIL_API_URL_STAGING }}" ]; then
            API_URL="${{ secrets.MYDEVIL_API_URL_STAGING }}"
          else
            API_URL="/api"
          fi
          echo "api_url=$API_URL" >> "$GITHUB_OUTPUT"

      - name: Resolve deploy destination
        id: dest
        shell: bash
        run: |
          TARGET="${{ github.event.inputs.target }}"
          ENV="${{ github.event.inputs.environment }}"
          INPUT_PATH="${{ github.event.inputs.remote_path }}"
          INPUT_APP="${{ github.event.inputs.app_name }}"
          REMOTE_PATH="$INPUT_PATH"
          APP_NAME="$INPUT_APP"

          if [ -z "$REMOTE_PATH" ]; then
            if [ "$TARGET" = "api" ]; then
              if [ "$ENV" = "production" ] && [ -n "${{ vars.MYDEVIL_API_REMOTE_PATH_PRODUCTION }}" ]; then
                REMOTE_PATH="${{ vars.MYDEVIL_API_REMOTE_PATH_PRODUCTION }}"
              elif [ "$ENV" = "staging" ] && [ -n "${{ vars.MYDEVIL_API_REMOTE_PATH_STAGING }}" ]; then
                REMOTE_PATH="${{ vars.MYDEVIL_API_REMOTE_PATH_STAGING }}"
              fi
            else
              if [ "$ENV" = "production" ] && [ -n "${{ vars.MYDEVIL_REMOTE_PATH_PRODUCTION }}" ]; then
                REMOTE_PATH="${{ vars.MYDEVIL_REMOTE_PATH_PRODUCTION }}"
              elif [ "$ENV" = "staging" ] && [ -n "${{ vars.MYDEVIL_REMOTE_PATH_STAGING }}" ]; then
                REMOTE_PATH="${{ vars.MYDEVIL_REMOTE_PATH_STAGING }}"
              fi
            fi
          fi

          if [ -z "$APP_NAME" ]; then
            if [ "$TARGET" = "api" ]; then
              if [ "$ENV" = "production" ] && [ -n "${{ vars.MYDEVIL_API_APP_NAME_PRODUCTION }}" ]; then
                APP_NAME="${{ vars.MYDEVIL_API_APP_NAME_PRODUCTION }}"
              elif [ "$ENV" = "staging" ] && [ -n "${{ vars.MYDEVIL_API_APP_NAME_STAGING }}" ]; then
                APP_NAME="${{ vars.MYDEVIL_API_APP_NAME_STAGING }}"
              fi
            else
              if [ "$ENV" = "production" ] && [ -n "${{ vars.MYDEVIL_APP_NAME_PRODUCTION }}" ]; then
                APP_NAME="${{ vars.MYDEVIL_APP_NAME_PRODUCTION }}"
              elif [ "$ENV" = "staging" ] && [ -n "${{ vars.MYDEVIL_APP_NAME_STAGING }}" ]; then
                APP_NAME="${{ vars.MYDEVIL_APP_NAME_STAGING }}"
              fi
            fi
          fi

          if [ -z "$REMOTE_PATH" ]; then
            echo "::error::remote_path not provided and no repository variable fallback found" >&2
            exit 1
          fi
          if [ -z "$APP_NAME" ]; then
            echo "::error::app_name not provided and no repository variable fallback found" >&2
            exit 1
          fi
          echo "remote_path=$REMOTE_PATH" >> "$GITHUB_OUTPUT"
          echo "app_name=$APP_NAME" >> "$GITHUB_OUTPUT"

      - name: Build frontend
        if: ${{ github.event.inputs.target != 'api' }}
        run: pnpm --filter frontend build
        env:
          # Embed API base URL resolved above (input > env-specific > fallback)
          NEXT_PUBLIC_API_URL: ${{ steps.api.outputs.api_url }}

      - name: Build backend
        if: ${{ github.event.inputs.target == 'api' }}
        run: pnpm --filter salonbw-backend build

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          KEY_CONTENT="${MYDEVIL_SSH_KEY:-$SSH_PRIVATE_KEY}"
          if printf "%s" "$KEY_CONTENT" | grep -q "-----BEGIN "; then
            printf "%s" "$KEY_CONTENT" | tr -d '\r' > ~/.ssh/mydevil
          else
            printf "%s" "$KEY_CONTENT" | tr -d '\r' | base64 -d > ~/.ssh/mydevil || printf "%s" "$KEY_CONTENT" | tr -d '\r' > ~/.ssh/mydevil
          fi
          chmod 600 ~/.ssh/mydevil
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/mydevil
          if [ -n "$MYDEVIL_KNOWN_HOSTS" ]; then
            printf "%s\n" "$MYDEVIL_KNOWN_HOSTS" > ~/.ssh/known_hosts
          else
            ssh-keyscan -H "$MYDEVIL_SSH_HOST" >> ~/.ssh/known_hosts
          fi
        env:
          MYDEVIL_SSH_HOST: ${{ secrets.MYDEVIL_SSH_HOST }}
          MYDEVIL_SSH_KEY: ${{ secrets.MYDEVIL_SSH_KEY }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          MYDEVIL_KNOWN_HOSTS: ${{ secrets.MYDEVIL_KNOWN_HOSTS }}

      - name: Ensure remote directories exist (frontend)
        if: ${{ github.event.inputs.target != 'api' }}
        run: |
          ssh -i ~/.ssh/mydevil -o IdentitiesOnly=yes ${{ secrets.MYDEVIL_SSH_USER }}@${{ secrets.MYDEVIL_SSH_HOST }} "mkdir -p '${{ steps.dest.outputs.remote_path }}/.next/standalone' '${{ steps.dest.outputs.remote_path }}/.next/static' '${{ steps.dest.outputs.remote_path }}/public'"

      - name: Upload frontend bundle
        if: ${{ github.event.inputs.target != 'api' }}
        run: |
          rsync -az --delete \
            --exclude='.git' \
            -e "ssh -i ~/.ssh/mydevil -o IdentitiesOnly=yes" frontend/.next/standalone/ \
            ${{ secrets.MYDEVIL_SSH_USER }}@${{ secrets.MYDEVIL_SSH_HOST }}:${{ steps.dest.outputs.remote_path }}/.next/standalone/
          rsync -az -e "ssh -i ~/.ssh/mydevil -o IdentitiesOnly=yes" --delete frontend/.next/static/ \
            ${{ secrets.MYDEVIL_SSH_USER }}@${{ secrets.MYDEVIL_SSH_HOST }}:${{ steps.dest.outputs.remote_path }}/.next/static/
          rsync -az -e "ssh -i ~/.ssh/mydevil -o IdentitiesOnly=yes" --delete frontend/public/ \
            ${{ secrets.MYDEVIL_SSH_USER }}@${{ secrets.MYDEVIL_SSH_HOST }}:${{ steps.dest.outputs.remote_path }}/public/
          rsync -az -e "ssh -i ~/.ssh/mydevil -o IdentitiesOnly=yes" frontend/app.js \
            ${{ secrets.MYDEVIL_SSH_USER }}@${{ secrets.MYDEVIL_SSH_HOST }}:${{ steps.dest.outputs.remote_path }}/

      - name: Prepare standalone runtime (install prod deps)
        if: ${{ github.event.inputs.target != 'api' }}
        run: |
          ssh -i ~/.ssh/mydevil -o IdentitiesOnly=yes ${{ secrets.MYDEVIL_SSH_USER }}@${{ secrets.MYDEVIL_SSH_HOST }} "REMOTE_PATH='${{ steps.dest.outputs.remote_path }}' bash -s" <<'SSH'
          set -euo pipefail
          cd "${REMOTE_PATH}/.next/standalone"
          # Remove workspace:* deps that npm can't resolve
          node - <<'NODE'
          const fs=require('fs');
          const f='package.json';
          const pkg=JSON.parse(fs.readFileSync(f,'utf8'));
          for (const k of ['dependencies','devDependencies','optionalDependencies','peerDependencies']){
            const o=pkg[k]; if(!o) continue;
            for (const d of Object.keys(o)) { if (String(o[d]).startsWith('workspace:')) delete o[d]; }
          }
          fs.writeFileSync(f, JSON.stringify(pkg,null,2));
          NODE
          npm install --omit=dev --ignore-scripts
          SSH

      - name: Upload backend bundle
        if: ${{ github.event.inputs.target == 'api' }}
        run: |
          rsync -az --delete \
            --exclude='.git' \
            backend/salonbw-backend/dist/ \
            ${{ secrets.MYDEVIL_SSH_USER }}@${{ secrets.MYDEVIL_SSH_HOST }}:${{ steps.dest.outputs.remote_path }}/dist/
          rsync -az backend/salonbw-backend/package.json \
            ${{ secrets.MYDEVIL_SSH_USER }}@${{ secrets.MYDEVIL_SSH_HOST }}:${{ steps.dest.outputs.remote_path }}/

      - name: Restart app (frontend)
        if: ${{ github.event.inputs.target != 'api' }}
        run: ssh -i ~/.ssh/mydevil -o IdentitiesOnly=yes ${{ secrets.MYDEVIL_SSH_USER }}@${{ secrets.MYDEVIL_SSH_HOST }} "devil www restart '${{ steps.dest.outputs.app_name }}'"

      - name: Restart app (backend)
        if: ${{ github.event.inputs.target == 'api' }}
        run: ssh ${{ secrets.MYDEVIL_SSH_USER }}@${{ secrets.MYDEVIL_SSH_HOST }} "devil nodejs restart '${{ steps.dest.outputs.app_name }}'"
