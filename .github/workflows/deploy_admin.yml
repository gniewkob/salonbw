name: Deploy Admin

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: Commit to deploy
        required: true
      environment:
        description: Target environment (e.g. production, staging)
        required: true
      api_url:
        description: Public API URL used at build time (leave empty to use environment defaults)
        required: false
        default: ''
      remote_path:
        description: Remote path on MyDevil (e.g., /usr/home/<user>/domains/<domain>/public_nodejs). If empty, repo variables are used.
        required: false
        default: ''
      app_name:
        description: MyDevil app/domain name to restart (e.g., domain.tld). If empty, repo variables are used.
        required: false
        default: ''

permissions:
  contents: read

jobs:
  deploy:
    name: Upload Admin Panel
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.commit_sha }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION || '22' }}
          cache: pnpm

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ vars.PNPM_VERSION || '10.14.0' }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Resolve API URL
        id: api
        shell: bash
        run: |
          INPUT_API="${{ github.event.inputs.api_url }}"
          ENV="${{ github.event.inputs.environment }}"
          if [ -n "$INPUT_API" ]; then
            API_URL="$INPUT_API"
          elif [ "$ENV" = "production" ] && [ -n "${{ secrets.MYDEVIL_API_URL_PRODUCTION }}" ]; then
            API_URL="${{ secrets.MYDEVIL_API_URL_PRODUCTION }}"
          elif [ "$ENV" = "production" ]; then
            API_URL="https://api.salon-bw.pl"
          elif [ "$ENV" = "staging" ] && [ -n "${{ secrets.MYDEVIL_API_URL_STAGING }}" ]; then
            API_URL="${{ secrets.MYDEVIL_API_URL_STAGING }}"
          else
            API_URL="/api"
          fi
          echo "api_url=$API_URL" >> "$GITHUB_OUTPUT"

      - name: Resolve deploy destination
        id: dest
        shell: bash
        run: |
          ENV="${{ github.event.inputs.environment }}"
          INPUT_PATH="${{ github.event.inputs.remote_path }}"
          INPUT_APP="${{ github.event.inputs.app_name }}"
          REMOTE_PATH="$INPUT_PATH"
          APP_NAME="$INPUT_APP"

          if [ -z "$REMOTE_PATH" ]; then
            if [ "$ENV" = "production" ] && [ -n "${{ vars.MYDEVIL_ADMIN_REMOTE_PATH_PRODUCTION }}" ]; then
              REMOTE_PATH="${{ vars.MYDEVIL_ADMIN_REMOTE_PATH_PRODUCTION }}"
            elif [ "$ENV" = "staging" ] && [ -n "${{ vars.MYDEVIL_ADMIN_REMOTE_PATH_STAGING }}" ]; then
              REMOTE_PATH="${{ vars.MYDEVIL_ADMIN_REMOTE_PATH_STAGING }}"
            fi
          fi

          if [ -z "$APP_NAME" ]; then
            if [ "$ENV" = "production" ] && [ -n "${{ vars.MYDEVIL_ADMIN_APP_NAME_PRODUCTION }}" ]; then
              APP_NAME="${{ vars.MYDEVIL_ADMIN_APP_NAME_PRODUCTION }}"
            elif [ "$ENV" = "staging" ] && [ -n "${{ vars.MYDEVIL_ADMIN_APP_NAME_STAGING }}" ]; then
              APP_NAME="${{ vars.MYDEVIL_ADMIN_APP_NAME_STAGING }}"
            fi
          fi

          if [ -z "$REMOTE_PATH" ] || [ -z "$APP_NAME" ]; then
            echo "::error::remote_path/app_name not provided and no repository variable fallback found" >&2
            exit 1
          fi
          echo "remote_path=$REMOTE_PATH" >> "$GITHUB_OUTPUT"
          echo "app_name=$APP_NAME" >> "$GITHUB_OUTPUT"

      - name: Build frontend (standalone)
        run: pnpm --filter frontend build
        env:
          NEXT_PUBLIC_API_URL: ${{ steps.api.outputs.api_url }}

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "$MYDEVIL_SSH_KEY" > ~/.ssh/mydevil
          chmod 600 ~/.ssh/mydevil
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/mydevil
          if [ -n "$MYDEVIL_KNOWN_HOSTS" ]; then
            echo "$MYDEVIL_KNOWN_HOSTS" > ~/.ssh/known_hosts
          else
            ssh-keyscan -H "$MYDEVIL_SSH_HOST" >> ~/.ssh/known_hosts
          fi
        env:
          MYDEVIL_SSH_HOST: ${{ secrets.MYDEVIL_SSH_HOST }}
          MYDEVIL_SSH_KEY: ${{ secrets.MYDEVIL_SSH_KEY }}
          MYDEVIL_KNOWN_HOSTS: ${{ secrets.MYDEVIL_KNOWN_HOSTS }}

      - name: Upload standalone bundle
        run: |
          rsync -az --delete frontend/.next/standalone/ \
            ${{ secrets.MYDEVIL_SSH_USER }}@${{ secrets.MYDEVIL_SSH_HOST }}:${{ steps.dest.outputs.remote_path }}/.next/standalone/
          rsync -az --delete frontend/.next/static/ \
            ${{ secrets.MYDEVIL_SSH_USER }}@${{ secrets.MYDEVIL_SSH_HOST }}:${{ steps.dest.outputs.remote_path }}/.next/static/
          rsync -az --delete frontend/public/ \
            ${{ secrets.MYDEVIL_SSH_USER }}@${{ secrets.MYDEVIL_SSH_HOST }}:${{ steps.dest.outputs.remote_path }}/public/
          rsync -az frontend/app.js \
            ${{ secrets.MYDEVIL_SSH_USER }}@${{ secrets.MYDEVIL_SSH_HOST }}:${{ steps.dest.outputs.remote_path }}/

      - name: Restart Passenger app
        run: ssh ${{ secrets.MYDEVIL_SSH_USER }}@${{ secrets.MYDEVIL_SSH_HOST }} "devil www restart '${{ steps.dest.outputs.app_name }}'"
